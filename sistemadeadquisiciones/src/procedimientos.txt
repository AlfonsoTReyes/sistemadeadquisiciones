CREATE OR REPLACE FUNCTION insertar_usuario(
    p_nombre VARCHAR(100),
    p_apellidos VARCHAR(200),
    p_nomina VARCHAR(50),
    p_contraseña VARCHAR(50),
    p_email VARCHAR(100),
    p_secretaria VARCHAR(200),
    p_sistema VARCHAR,
    p_id_rol INT
) RETURNS TABLE (
    id_usuario INT,
    nombre VARCHAR(100),
    apellidos VARCHAR(200),
    nomina VARCHAR(50),
    email VARCHAR(100),
    contraseña VARCHAR(50),
    id_rol INT,
    sistema VARCHAR,
    secretaria VARCHAR(200),
    estatus BOOLEAN,
    created_at time without time zone
) AS $$
DECLARE
    nuevo_usuario RECORD;
BEGIN
    -- Insertar usuario en la tabla usuarios y obtener el nuevo registro
    INSERT INTO usuarios (nombre, apellidos, nomina, contraseña, email, secretaria, sistema, id_rol, estatus, created_at)
    VALUES (p_nombre, p_apellidos, p_nomina, p_contraseña, p_email, p_secretaria, p_sistema, p_id_rol, true, now())
    RETURNING * INTO nuevo_usuario;

    -- Retornar el usuario recién creado
    RETURN QUERY 
    SELECT 
        nuevo_usuario.id_usuario, 
        nuevo_usuario.nombre, 
        nuevo_usuario.apellidos,
        nuevo_usuario.nomina,
        nuevo_usuario.email, 
        nuevo_usuario.contraseña, 
        nuevo_usuario.id_rol, 
        nuevo_usuario.sistema,
        nuevo_usuario.secretaria, 
        nuevo_usuario.estatus,
        nuevo_usuario.created_at;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION insertar_bitacora_sistema(
    p_tabla_afectada VARCHAR(150),
    p_operacion VARCHAR(200),
    p_usuario VARCHAR(200),
    p_datos_nuevos TEXT
) RETURNS VOID AS $$
BEGIN
    INSERT INTO bitacora_sistema (tabla_afectada, operacion, usuario, informacion, created_at)
    VALUES (p_tabla_afectada, p_operacion, p_usuario, p_datos_nuevos, NOW());
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION obtener_usuarios()
RETURNS TABLE (
    id_usuario INT,
    nombre VARCHAR(50),
    apellidos VARCHAR(50),
    nomina VARCHAR(50),
    contraseña VARCHAR(50),
    created_at TIME WITHOUT TIME ZONE,
    secretaria VARCHAR(200),
    sistema VARCHAR,
    id_rol INT,
    email VARCHAR(50),
    estatus boolean,
    nombre_roles VARCHAR
) AS $$
BEGIN
    RETURN QUERY 
    SELECT 
        u.id_usuario, 
        u.nombre, 
        u.apellidos, 
        u.nomina, 
        u."contraseña", 
        u.created_at, 
        u.secretaria, 
        u.sistema, 
        u.id_rol, 
        u.email, 
        u.estatus,
        r.nombre AS nombre_roles
    FROM public.usuarios u
    INNER JOIN public.roles r ON u.id_rol = r.id_rol;
END;
$$ LANGUAGE plpgsql;





/////////////////////////////////////////////////////////////////roles
CREATE OR REPLACE FUNCTION obtener_roles()
RETURNS TABLE (
    id_rol INT,
    nombre VARCHAR(50),
    descripcion VARCHAR(50),
    created_at TIME WITHOUT TIME ZONE
) AS $$
BEGIN
    RETURN QUERY 
    SELECT 
        id_rol,
        nombre,
        descripcion,
        created_at
    FROM public.roles;
END;
$$ LANGUAGE plpgsql;

